package layers.logic;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Date;

import layers.data.EmployeeMapper;
import layers.model.Employee;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class ReportGenerator {

	// private static final String FILE_PATH =
	// "C:/Users/rzvn/Documents/Workspace.GENERAL/assignment_1/";
	private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN,
			18, Font.BOLD);
	private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN,
			12, Font.BOLD);

	public ReportGenerator(String fileName, String employeeID, String from,
			String to) {
		Document doc = new Document();
		try {
			PdfWriter.getInstance(doc, new FileOutputStream(fileName + ".pdf"));
			addMetaData(doc);
			addTitlePage(doc, employeeID, from, to);

		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			doc.close();
		}
		doc.close();

	}

	public ReportGenerator(String fileName, String employeeID) {
		Document doc = new Document();

		try {
			PdfWriter.getInstance(doc, new FileOutputStream(fileName + ".pdf"));
			doc.open();
			addMetaData(doc);
			addTitlePage(doc, employeeID);

		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			doc.close();
		}
		doc.close();

	}

	private void addTitlePage(Document doc, String employeeID)
			throws DocumentException {
		// TODO Auto-generated method stub
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Employee Report", catFont));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Report generated by: "
				+ LoginUserRetriever.getEmployee().getName() + ",ID: "
				+ LoginUserRetriever.getEmployee().getEmployeeID() + ", "
				+ new Date(), smallBold));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Type: Master", smallBold));
		addEmptyLine(preface, 3);
		Employee subject = EmployeeMapper.fetchByEmployeeID(Integer
				.parseInt(employeeID));
		preface.add(new Paragraph("Employee: " + subject.getName() + ", ID: "
				+ subject.getEmployeeID() + "\nAddress: "
				+ subject.getAddress(), smallBold));
		addEmptyLine(preface, 2);
		preface.add(new Paragraph(LoggingHelper.getMasterLogOfEmployee(subject)));
		doc.add(preface);

	}

	private void addTitlePage(Document doc, String employeeID, String from,
			String to) throws DocumentException {
		// TODO Auto-generated method stub
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Employee Report", catFont));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Report generated by: "
				+ LoginUserRetriever.getEmployee().getName() + ",ID: "
				+ LoginUserRetriever.getEmployee().getEmployeeID() + ", "
				+ new Date(), smallBold));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Type: Filtered", smallBold));
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Start date: " + from + ", End date: " + to,
				smallBold));
		addEmptyLine(preface, 3);
		Employee subject = EmployeeMapper.fetchByEmployeeID(Integer
				.parseInt(employeeID));
		preface.add(new Paragraph("Employee: " + subject.getName() + ", ID: "
				+ subject.getEmployeeID() + "\nAddress: "
				+ subject.getAddress(), smallBold));
		addEmptyLine(preface, 2);
		preface.add(new Paragraph(LoggingHelper.getLogOfEmployeeByDate(subject,
				from, to)));
		doc.add(preface);
	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		// TODO Auto-generated method stub
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	private void addMetaData(Document doc) {
		// TODO Auto-generated method stub
		doc.addTitle("Periodic employee work report");
		doc.addAuthor(LoginUserRetriever.getEmployee().getName());
		doc.addCreator(LoginUserRetriever.getEmployee().getName());
	}
}
